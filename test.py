# %% [markdown]
# ## 1. –ü—Ä–æ–≤–µ—Å—Ç–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç—Ä–µ—Ö–º–µ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ (3D Plot). –î–ª—è –≤—ã–±–æ—Ä–∫–∏ ¬´Iris¬ª –æ–±–æ—Å–Ω–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä —Ç—Ä–µ—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π (—Å–¥–µ–ª–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π). –°—Ä–∞–≤–Ω–∏—Ç—å —Ç—Ä–µ—Ö–º–µ—Ä–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è –≤—ã–±–æ—Ä–æ–∫ –∏ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã (–ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —Å—á–∏—Ç–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º).  –í –æ—Ç—á—ë—Ç –≤–∫–ª—é—á–∏—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ –≤—ã–≤–æ–¥ –ø–æ –Ω–∏–º) –∏ –≥—Ä–∞—Ñ–∏–∫–∏
# 
# ### –î–∞—Ç–∞—Å–µ—Ç –ò—Ä–∏—Å—ã –§–∏—à–µ—Ä–∞

# %%
from sklearn.datasets import load_iris
import numpy  as np
import pandas as pd

iris = load_iris()
data_pd = pd.DataFrame(data=np.c_[iris['data'], iris['target']], columns=iris['feature_names'] + ['target'])
data_pd = data_pd.rename(columns={'sepal length (cm)': 'sl', 'sepal width (cm)': 'sw', 'petal length (cm)': 'pl', 'petal width (cm)': 'pw'})

print(data_pd)
print(data_pd.describe())

# %% [markdown]
# –ò–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–µ, –∏–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ sw –∏–º–µ–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤, –ø–æ—ç—Ç–æ–º—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ target. 

# %%
import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure()
ax = plt.axes(projection='3d')
z = data_pd['sl']
x = data_pd['pl']
y = data_pd['pw']
ax.plot3D(x, y, z, 'b+')
ax.set_xlabel('pl')
ax.set_ylabel('pw')
ax.set_zlabel('sl')
ax.set_title('–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Ä–∏—Å–æ–≤.')

plt.show()

# %%
import seaborn as sns
import pingouin

data_x = data_pd.iloc[:,:-1]
corr_matr = data_x.corr()
pcorr_matr = data_x.pcorr()

data_x.boxplot()
plt.show()
sns.heatmap(corr_matr, annot=True, vmin=-1, vmax=1)
plt.title('–ü–∞—Ä–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏')
plt.show()
sns.heatmap(pcorr_matr, annot=True, vmin=-1, vmax=1)
plt.title('–ß–∞—Å—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏')
plt.show()

# %% [markdown]
# ### –î–∞—Ç–∞—Å–µ—Ç –ë–µ–π—Å–±–æ–ª

# %%
baseball_pd = pd.read_csv('Baseball.csv', delimiter=';', decimal=',')

ax = plt.axes(projection='3d')
z = baseball_pd['Height']
x = baseball_pd['Weight']
y = baseball_pd['Age']
ax.plot3D(x, y, z, 'b+')
ax.set_xlabel('Weight')
ax.set_ylabel('Age')
ax.set_zlabel('Height')
ax.set_title('–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–µ–π—Å–±–æ–ª–∏—Å—Ç–æ–≤.')
plt.show()

# %% [markdown]
# –ù–∞ —Ç—Ä—ë—Ö–º–µ—Ä–Ω–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Ä–∏—Å–æ–≤ —è—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω—ã –¥–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞. –ê –ø—Ä–æ –¥–∞–Ω–Ω—ã–µ, –∫–∞—Å–∞—é—â–∏–µ—Å—è –±–µ–π—Å–±–æ–ª–∏—Å—Ç–æ–≤, –Ω–µ–ª—å–∑—è —Ç–æ—á–Ω–æ —Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞–ª–∏—á–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤. –¢—É—Ç –¥–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç —Ö–∞–æ—Ç–∏—á–Ω–æ –∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω–æ.

# %% [markdown]
# ## 2.	–ü—Ä–æ–≤–µ—Å—Ç–∏ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é. –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –º–µ—Ä—ã –±–ª–∏–∑–æ—Å—Ç–∏ (–µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –º–∞–Ω—Ö—ç—Ç—Ç–µ–Ω—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ß–µ–±—ã—à–µ–≤–∞, –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ) –∏ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—ä–µ–¥–∏-–Ω–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (–æ–¥–∏–Ω–æ—á–Ω–∞—è —Å–≤—è–∑—å, –ø–æ–ª–Ω–∞—è —Å–≤—è–∑—å, –Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è —Å–≤—è–∑—å, –Ω–µ-–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Ü–µ–Ω—Ç—Ä–æ–∏–¥–Ω–∞—è —Å–≤—è–∑—å, –º–µ—Ç–æ–¥ –£–æ—Ä–¥–∞). –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É –∏–∑–º–µ-–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤. –û—Ü–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–∑–¥–µ–ª—è–µ—Ç—Å—è –∏—Å—Å–ª–µ–¥—É–µ–º–∞—è —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å. –í –æ—Ç—á—ë—Ç –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–∏–ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–æ—Å–Ω–æ–≤–∞—Ç—å –ø–æ—á–µ–º—É –æ–Ω–∏ –Ω–∞–∏–ª—É—á—à–∏–µ (—Å—Ä–∞–≤–Ω–∏—Ç—å —Å –ø–ª–æ-—Ö–∏–º/—Å—Ä–µ–¥–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º). –¢–∞–∫ –∂–µ –≤–∫–ª—é—á–∏—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤.

# %%
from scipy.cluster.hierarchy import dendrogram, linkage

def plot_dendrogramm(data_x, method, metric):
    cluster_ar = linkage(data_x, method=method, metric=metric)
    link_df = pd.DataFrame(cluster_ar, index=[f'step {i+1}' for i in range(cluster_ar.shape[0])], columns=['cluster1', 'cluster2', 'dist', 'number elements'] )
    fig = plt.figure(figsize=(25,10))
    row_dendr = dendrogram(link_df)
    plt.title(f'Metric: {metric} Method: {method}')
    plt.show()

metrics = ['euclidean', 'cityblock', 'chebyshev', 'cosine']

for metric in metrics:
    plot_dendrogramm(data_x, 'single', metric)


# %%
from sklearn.cluster import AgglomerativeClustering
from sklearn.neighbors import NearestCentroid
from mpl_toolkits.mplot3d import Axes3D

def plot_clusters(data_x, n_clusters, method, metric):
    if method != 'centroid':
        cl = AgglomerativeClustering(n_clusters=n_clusters, linkage=method, metric=metric)
        labels = cl.fit_predict(data_x)
    elif method == 'centroid':
        clusterer = AgglomerativeClustering(n_clusters=n_clusters, linkage='ward')
        y_predict = clusterer.fit_predict(data_x)
        clf = NearestCentroid()
        clf.fit(data_x, y_predict)
        labels = clf.predict(data_x)
    else:
        return

    fig = plt.figure()
    ax = plt.axes(projection='3d')
    z = data_pd['sl']
    x = data_pd['pl']
    y = data_pd['pw']
    ax.scatter(x, y, z, c=labels, marker='o', edgecolors=['000']*len(labels))
    ax.set_xlabel('pl')
    ax.set_ylabel('pw')
    ax.set_zlabel('sl')
    ax.set_title(f'–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Ä–∏—Å–æ–≤.\nMetric: {metric}, method: {method}')
    plt.show()

for metric in metrics:
    plot_clusters(data_x, 2, 'single', metric)

# %%
methods = ['single', 'complete', 'average', 'centroid', 'ward']

for method in methods:
    plot_dendrogramm(data_x, method, 'euclidean')
    plot_clusters(data_x, 2, method, 'euclidean')

# %% [markdown]
# –ü–æ —Ç—Ä—ë—Ö–º–µ—Ä–Ω–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é –≤—Å–µ—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –≤—ã–±–æ—Ä–∫–∏ –∏ –ø–æ –≤—Å–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º–∞–º –≤–∏–¥–Ω–æ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å –Ω–∞ –¥–≤–∞ —è–≤–Ω–æ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–∞. –î–ª—è –¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º –≤—Å–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–æ 2 –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–∏ –ø—Ä–∏ –Ω–µ–±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤ 1 –∫–ª–∞—Å—Ç–µ—Ä.
# 
# –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–µ—Ç—Ä–∏–∫ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –†–∞–∑–ª–∏—á–∏–µ –±—ã–ª–æ –≤ —Ç–æ–º, —á—Ç–æ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø–æ–ª—É—á–∞–ª–∏—Å—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤. –î–ª—è –∫–æ—Å–∏–Ω—É—Å–Ω–æ–π –º–µ—Ä—ã –±–ª–∏–∑–æ—Å—Ç–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–∞–ª—å–Ω–∏–º–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏ –±—ã–ª–æ –≥–æ—Ä–∞–∑–¥–æ —Å–∏–ª—å–Ω–µ–µ –≤—ã–¥–µ–ª–µ–Ω–æ, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏ –±—ã–ª–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω–µ–µ –≤—ã–¥–µ–ª–µ–Ω–æ.
# 
# –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–µ—Ç–æ–¥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–∏–ª–∏—Å—å –æ—Ç–ª–∏—á–Ω—ã–º–∏ –æ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞. –ú–µ—Ç–æ–¥ –¥–∞–ª—å–Ω–µ–≥–æ —Å–æ—Å–µ–¥–∞ –ø–æ–∫–∞–∑–∞–ª —Å–∞–º—ã–π —Ö—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ–±—ä–µ–¥–∏–Ω–∏–≤ –≤ –æ–¥–∏–Ω –∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π —è–≤–Ω–æ –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –Ω–µ–º—É. –ù–µ–ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫–∞–∑–∞–ª –º–µ—Ç–æ–¥ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–Ω–æ–π —Å–≤—è–∑–∏, –≤—ã–¥–µ–ª–∏–≤ –ª–∏—à—å –ø–∞—Ä—É –Ω–∞–±–ª—é–¥–µ–Ω–∏–π —è–≤–Ω–æ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –∫ —Å–≤–æ–µ–º—É –∫–ª–∞—Å—Ç–µ—Ä—É. –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∫–∞–∑–∞–ª–∏ —Å–µ–±—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Ö–æ—Ä–æ—à–æüòéüëç, –ø–æ–∫–∞–∑–∞–≤ –æ–∂–∏–¥–∞–µ–º—ã–π –ø–æ —Ç—Ä—ë—Ö–º–µ—Ä–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

# %%
from sklearn import decomposition
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
data_x_scaled = scaler.fit_transform(data_x)
pca = decomposition.PCA()
x_pca = pca.fit_transform(data_x_scaled)
data_delta = pca.explained_variance_ratio_
print(data_delta)
print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {100*sum(data_delta[:2]):.2f}%')
plt.scatter(x_pca[:,0], x_pca[:,1])
plt.title('–ú–µ—Ç–æ–¥ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç. –ò—Ä–∏—Å—ã')
plt.show()
ax = plt.axes(projection='3d')
ax.plot3D(x_pca[:,0], x_pca[:,1], x_pca[:,2], 'b+')
plt.show()


